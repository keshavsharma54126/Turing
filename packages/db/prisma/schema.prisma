// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String?
  imageUrl  String?  @map("image_url")
  googleId  String?  @map("google_id")
  profileImage String? @map("profile_image")
  role      UserRole @default(USER)
  tests     Test[]
  results   TestResult[]
  conversations Conversation[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Resource {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  content   String
  metadata  Json?
  testId    String?  @map("test_id")
  embedding Unsupported("vector(768)")
  test      Test?    @relation("TestResources", fields: [testId], references: [id])
  conversationId String? @map("conversation_id")
  conversation Conversation? @relation("ConversationResources", fields: [conversationId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("resources")
}

model Test {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  topic       String
  difficulty  String
  numQuestions Int
  pdfUrl      String[]  @map("pdf_url")
  urls        String[] @map("urls")
  questions   Json?
  answers     Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id])
  resources   Resource[] @relation("TestResources")
  results     TestResult[]
  isCompleted Boolean @default(false) @map("is_completed")
  @@map("tests")
}

model TestResult {
  id          String   @id @default(cuid())
  testId      String   @map("test_id")
  userId      String   @map("user_id")
  correctAnswers Int
  incorrectAnswers Int
  skippedAnswers Int
  score       Int
  avgTimePerQuestion Int
  createdAt   DateTime @default(now()) @map("created_at")
  test        Test     @relation(fields: [testId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("test_results")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  messages  Json
  resources Resource[] @relation("ConversationResources")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("conversations")
}


enum UserRole {
  USER
  ADMIN
}